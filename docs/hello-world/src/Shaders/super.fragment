    /**************************    
    Void shader by Griffith Thomas 
    (@KiranWells - Codepen),
    inspired by Minecraft end portal blocks
    If you use my code please attribute it to me.
    **************************/
    uniform float time;
    varying vec2 vUv;
    uniform float scale;
      
    float u_time = time / 1000.0;//ms to sec
      
    float random (in vec2 _st) {
    //don't really get how it works, just found through experimentation
    return fract(dot(vec2((mod(_st.x / cos(_st.y), 5.0) * 1000.0)), vec2(1.1)));
    }
    
    vec2 random2( vec2 p ) {
    //just uses random, but with a small variation to prevent similarity
    return vec2(random(p), random(p.yx + random(p)));
    }
    
    vec2 cell(vec2 st) {
      //finds a random point in a square and returns whether the pixel is close 
        
    vec2 i = floor(st);//tile location
    vec2 f = fract(st);//position on the tile
    
    vec2 point = random2(i);
    
    //determine a random movement direction based on point location
    vec2 dir = random2(-i);
    //and move in that location
    point += cos(u_time + random(i) * 6.2 + point.y) * dir/2.;
    
    //find how close this pixel is to the point being cycled through
    vec2 diff = point - f;//difference between pnt + pxl
    
    //return the distance  (a bit arbitrary, but useful)
    return (smoothstep(0.1,0.11,abs(diff)));
    }                        
    
    void main() {
    //get scaled coordinates of pixel (larger scale = zoomed out)
    vec2 st = gl_FragCoord.xy/1000.0*scale + 1.0;
    vec3 color = vec3(0.0);
    vec3 black = vec3(0.0);
    vec3 green = vec3(0.1,0.4,0.3);
    vec3 dgreen = vec3(0.2,0.3,0.2);
    vec3 bgreen = vec3(0.1,0.4,0.4);
    
    //loop through several sizes and create a 'fleck'
    //for each one in several colors
    for(float i = 0.;i<2.;i++){
      vec2 dist = cell(st * i).xy;
      color += mix(green, black, dist.x+dist.y);
      dist = cell(st * (2.+ i)).xy;
      color += mix(dgreen, black, dist.x+dist.y);
      dist = cell(st * (3.+ i)).xy;
      color += mix(bgreen, black, dist.x+dist.y);
    }
    
    gl_FragColor = vec4( color, 1.0);
    }